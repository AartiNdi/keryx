#!/usr/bin/python
# -*- coding: utf-8 -*-
### BEGIN LICENSE
# Copyright (C) 2010 Chris Oliver <chris@excid3.com>
#                    mac9416 <mac9416@keryxproject.org>
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License version 3, as published 
# by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranties of 
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
# PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

import sys
import os
import platform
import gtk

import gettext
from gettext import gettext as _
gettext.textdomain('keryx')

# optional Launchpad integration
# this shouldn't crash if not found as it is simply used for bug reporting
try:
    import LaunchpadIntegration
    launchpad_available = True
except:
    launchpad_available = False

# Add project root directory (enable symlink, and trunk execution).
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'keryx'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY) # for subprocesses

from keryx import (
    AboutKeryxDialog, keryxconfig)
from keryx.helpers import create_tab, create_closeable_tab, get_builder


class KeryxWindow(gtk.Window):
    __gtype_name__ = "KeryxWindow"
    
    # To construct a new instance of this method, the following notable 
    # methods are called in this order:
    # __new__(cls)
    # __init__(self)
    # finish_initializing(self, builder)
    # __init__(self)
    #
    # For this reason, it's recommended you leave __init__ empty and put
    # your inialization code in finish_intializing
    
    def __new__(cls):
        """Special static method that's automatically called by Python when 
        constructing a new instance of this class.
        
        Returns a fully instantiated KeryxWindow object.
        """
        builder = get_builder('KeryxWindow')
        new_object = builder.get_object("keryx_window")
        new_object.finish_initializing(builder)
        return new_object

    def finish_initializing(self, builder):
        """Called while initializing this instance in __new__

        finish_initalizing should be called after parsing the UI definition
        and creating a KeryxWindow object with it in order to finish
        initializing the start of the new KeryxWindow instance.
        
        Put your initilization code in here and leave __init__ undefined.
        """
        # Get a reference to the builder and set up the signals.
        self.builder = builder
        self.builder.connect_signals(self)

        global launchpad_available
        if launchpad_available:
            # see https://wiki.ubuntu.com/UbuntuDevelopment/Internationalisation/Coding for more information
            # about LaunchpadIntegration
            helpmenu = self._get('helpMenu')
            if helpmenu:
                LaunchpadIntegration.set_sourcepackagename('keryx')
                LaunchpadIntegration.add_items(helpmenu, 0, False, True)
            else:
                launchpad_available = False

        # Uncomment the following code to read in preferences at start up.
        self.config = keryxconfig.Config()

        # Code for other initialization actions should be added here.
        self.notebook = self._get("notebook")
         
        name = self._get("add_computer_name_entry")
        name.set_text(platform.node()) 
               
        # Request default window size
        self.set_size_request(600, 400)
        
        # Assign widgets
        self._initial_configuration()
        self.load_config()
        
    def _initial_configuration(self):
        """Initialize and assign widgets to variables"""
        self.computer = self._get("computer_tab")
        self.preferences = self._get("preferences_tab")
        self.downloads = self._get("downloads_tab")
        self.computer.set_visible(False)
        #self.preferences.set_visible(False)
        self.downloads.set_visible(False)
        
        self.computers_list = self._get("computers_liststore")
        self.computers_list.clear()
        
        self.packages_list = self._get("packages_liststore")
        self.packages_list.clear()
        
        
    def load_config(self):
        # Create and set the projects folder
        projects_chooser = self._get("projects_filechooserbutton")
        path = os.path.abspath(self.config.get("projects"))
        if not os.path.exists(path):
            os.makedirs(path)
        projects_chooser.set_current_folder(path)
        
        # Create and set the downloads folder
        downloads_chooser = self._get("downloads_filechooserbutton")
        path = os.path.abspath(self.config.get("downloads"))
        if not os.path.exists(path):
            os.makedirs(path)
        downloads_chooser.set_current_folder(path)
        
        # Set proxy
        active = self.config.get("proxy") == "True"
        self._get("proxy_manual_radiobutton").set_active(active)
        self._get("proxy_direct_radiobutton").set_active(not active)

        self._get("proxy_entry").set_text(self.config.get("proxy_url"))
        self._get("proxy_port_spinbutton").set_value(float(self.config.get("proxy_port")))
        self._get("proxy_username_entry").set_text(self.config.get("proxy_username"))
        self._get("proxy_password_entry").set_text(self.config.get("proxy_password"))


    #TODO: Move errors to their own function to be called easily
    def on_add_button_clicked(self, widget, data=None):
        status_file = "/var/lib/dpkg/status"
        sources_file = "/etc/apt/sources.list"
        
        if not platform.system() == "Linux" or \
           not os.path.exists(status_file) or \
           not os.path.exists(sources_file):
            md = gtk.MessageDialog(self, 
                gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_ERROR, 
                gtk.BUTTONS_OK, "Sorry, you can only add Debian based Linux distros.\nPlease use Keryx on your offline machine.")
            md.set_title("Error Adding Computer")
            md.run()
            md.destroy()
            return
    
        name = self._get("add_computer_name_entry").get_text()
        
        path = os.path.join(self.config.get("projects"), name)
        if os.path.exists(path):
            md = gtk.MessageDialog(self, 
                gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_ERROR, 
                gtk.BUTTONS_OK, "The computer appears to have already been added.\nMake sure you to use a different name for each computer.")
            md.set_title("Error Adding Computer")
            md.run()
            md.destroy()
            print path
            return
        
        os.makedirs(path)
        f = open(os.path.join(path, "%s.keryx" % name), "wb")
        f.write("%s\napt" % name)
        f.close()
        
        self.computers_list.append([name])
        
        f = open(os.path.join(path, "apt.conf"), "wb")
        f.write("%s\n%s\n%s\n%s" % (platform.uname()[1], 
                                    " ".join(platform.linux_distribution()), 
                                    platform.machine(),
                                    platform.release()))
        f.close()
        
        md = gtk.MessageDialog(self, 
            gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_INFO, 
            gtk.BUTTONS_OK, "Computer added successfully!\nNow you can click Manage to select some packages to download later or you can move Keryx to a computer with internet access to get started.")
        md.set_title("Everything Went Better Than Expected")
        md.run()
        md.destroy()
        
    def about(self, widget, data=None):
        """Display the about box for keryx."""
        about = AboutKeryxDialog.AboutKeryxDialog()
        response = about.run()
        about.destroy()

    def preferences(self, widget, data=None):
        """Display the preferences window for keryx."""
        visible = self.preferences.get_visible()
        self.preferences.set_visible(not visible)
        if not visible:
            self.notebook.set_current_page(self.notebook.page_num(self.preferences))
     
    def quit(self, widget, data=None):
        """Signal handler for closing the KeryxWindow."""
        self.destroy()

    def on_destroy(self, widget, data=None):
        """Called when the KeryxWindow is closed."""
        # Clean up code for saving application state should be added here.
        self.config.save()
        gtk.main_quit()
        
    def on_proxy_manual_radiobutton_toggled(self, widget, data=None):
        """Called when Manual proxy configuration is toggled"""
        widgets = ["proxy_entry", "proxy_port_spinbutton", "proxy_username_entry", "proxy_password_entry"]
        s = widget.get_active()
        
        # Set manual proxy entries sensitive as necessary
        for item in widgets:
            self._get(item).set_sensitive(s)

    def on_preferences_changed(self, widget, data=None):
        self.config.set("projects", self._get("projects_filechooserbutton").get_current_folder())
        self.config.set("downloads", self._get("downloads_filechooserbutton").get_current_folder())
        
        self.config.set("proxy", self._get("proxy_manual_radiobutton").get_active())
        self.config.set("proxy_url", self._get("proxy_entry").get_text())
        self.config.set("proxy_port", str(self._get("proxy_port_spinbutton").get_value()))
        self.config.set("proxy_username", self._get("proxy_username_entry").get_text())
        self.config.set("proxy_password", self._get("proxy_password_entry").get_text())
        
        self.config.save()
        
        self._get("preferences_label").set_text("Preferences saved to %s" % self.config.get_filename())
        
    def on_preferences_reset(self, widget, data=None):
        self._get("preferences_label").set_text("Preferences reset")
        self.load_config()
        
    def on_switch_tab(self, notebook, page, page_num, data=None):
        self._get("preferences_label").set_text("Click Save to apply changes")
        
    def _get(self, name):
        return self.builder.get_object(name)

if __name__ == "__main__":
    # Support for command line options.
    import logging
    import optparse
    parser = optparse.OptionParser(version="%prog %ver")
    parser.add_option(
        "-v", "--verbose", action="store_true", dest="verbose",
        help=_("Show debug messages"))
    (options, args) = parser.parse_args()

    # Set the logging level to show debug messages.
    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug('logging enabled')

    # Run the application.
    window = KeryxWindow()
    window.show()
    gtk.main()
